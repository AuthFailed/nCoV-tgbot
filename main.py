from aiogram import executor
from aiogram.types import *

import info_handler
import keyboard as kb
from config import dp, bot


@dp.message_handler(commands=["start"])
async def start_message(msg: Message):
    await msg.reply(
        text="–ü—Ä–∏–≤–µ—Ç! –Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞—Ä–∞–∂–µ–Ω–∏—è 2019-nCoV.\n"
             "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")


@dp.message_handler(commands=["menu"])
async def menu_message(msg: Message):
    await msg.reply(
        text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ *–∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ*:",
        reply_markup=kb.main_menu(),
    )


@dp.callback_query_handler(lambda _call: True)
async def handle_callbacks(call: CallbackQuery):
    """–û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –∫—ç–ª–ª–±—ç–∫–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–∞."""
    chat_id = call.message.chat.id
    username = call.from_user.username

    if call.data == "current_stats":
        info = info_handler.get_main_info()
        await call.message.edit_text(
            f"*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ 2019-nCoV*:\n\n"
            f"–ó–∞—Ä–∞–∂–µ–Ω–Ω—ã—Ö ‚ò£Ô∏è: *{info['Infected']}*\n\n"
            f"–ù–∞ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–∏ ‚ùì: *{info['Possible']}*\n\n"
            f"–ù–∞ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–µ ‚ò¢Ô∏è: *{info['Quarantine']} ({info['Quarantined_Cities']} –≥–æ—Ä–æ–¥–æ–≤)\n\n*"
            f"–í—ã–ª–µ—á–∏–≤—à–∏—Ö—Å—è üíä: *{info['Recovered']}*\n\n"
            f"–°–º–µ—Ä—Ç–∏ ‚ò†Ô∏è: *{info['Deaths']}*\n\n"
            f"_–°–º–µ—Ä—Ç–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {info['Death_Rate']}%_\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: *{info['Date']} MSK*",
            reply_markup=kb.main_menu(),
        )
        await call.answer()
    elif call.data == "quarantined_cities":
        table = info_handler.get_table_cities()
        answer_message = "*–ì–æ—Ä–æ–¥–∞ –Ω–∞ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–µ*\n(–ì–æ—Ä–æ–¥\t\t|\t\t –¥–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è\t\t|\t\t–ù–∞—Å–µ–ª–µ–Ω–∏–µ)__\n\n"
        for i in range(len(table)-1):
            answer_message += f"{table[i][0]} - {table[i][1]} - {table[i][2]}\n"
        await call.message.edit_text(
            answer_message+"__",
            reply_markup=kb.info_menu())
        await call.answer()
    elif call.data == "disease_forecast":
        table = info_handler.disease_forecast()
        answer_message = "*–ü—Ä–æ–≥–Ω–æ–∑ –∑–∞—Ä–∞–∂–µ–Ω–∏—è –ø–æ –ö–∏—Ç–∞—é –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 5 –¥–Ω–µ–π:*\n\n" \
                         "*–î–∞—Ç–∞*              |\t\t\t*–ö–æ–ª-–≤–æ –∏–Ω—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö*\n"
        for i in range(len(table)):
            answer_message += f"{table[i][0]}\t\t\t|\t\t\t{table[i][1]}\n"
        answer_message = answer_message.replace("(–ü—Ä–æ–≥–Ω–æ–∑)", "`(–ü—Ä–æ–≥–Ω–æ–∑)`")
        await call.message.edit_text(answer_message +
                                     "\n\n_–ù–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π –ø–æ –ö–∏—Ç–∞—é (—Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è)"
                                     "\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞ –ø—Ä–∏ —Å—Ä–µ–¥–Ω–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–µ –∑–∞—Ä–∞–∂–µ–Ω–∏—è –≤ 1.304180_",
                                     reply_markup=kb.main_menu())
        await call.answer()
    elif call.data == "back_to_home":
        await call.message.edit_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ *–∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ*:",
                               reply_markup=kb.main_menu())
        await call.answer()


@dp.inline_handler()
async def inline_stats(inline_query: InlineQuery):
    info = info_handler.get_main_info()
    text =  (f"*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ 2019-nCoV*:\n\n"
    f"–ó–∞—Ä–∞–∂–µ–Ω–Ω—ã—Ö ‚ò£Ô∏è: *{info['Infected']}*\n\n"
    f"–ù–∞ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–∏ ‚ùì: *{info['Possible']}*\n\n"
    f"–ù–∞ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–µ ‚ò¢Ô∏è: *{info['Quarantine']} ({info['Quarantined_Cities']} –≥–æ—Ä–æ–¥–æ–≤)\n\n*"
    f"–í—ã–ª–µ—á–∏–≤—à–∏—Ö—Å—è üíä: *{info['Recovered']}*\n\n"
    f"–°–º–µ—Ä—Ç–∏ ‚ò†Ô∏è: *{info['Deaths']}*\n\n"
    f"_–°–º–µ—Ä—Ç–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {info['Death_Rate']}%_\n"
             
    f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: *{info['Date']} MSK*")
    input_content = InputTextMessageContent(text)
    item = InlineQueryResultArticle(
        id="1", title="2019-nCoV stats", input_message_content=input_content
    )
    await bot.answer_inline_query(inline_query.id, results=[item], cache_time=1)


# @dp.errors_handler()
# async def error_handler():



if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
